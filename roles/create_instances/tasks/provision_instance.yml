---

# Modifying images
# https://docs.openstack.org/image-guide/modify-images.html
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/sect-guest_virtual_machine_disk_access_with_offline_tools-virt_resize_resizing_guest_virtual_machines_offline

- set_fact:
    disk_path: "{{ image_path }}/{{ instance.name }}"
    base_path: "{{ image_path }}/{{ base_image }}"

- set_fact:
    boot_disk: "{{ disk_path }}.disk.0"

- name: "Copy base image disk for '{{ instance.name }}'"
  command: "cp {{ base_path }} {{ boot_disk }}"
  args:
    creates: "{{ boot_disk }}"

- set_fact:
    boot_disk_info: "{{ boot_disk | image_info }}"

- set_fact:
    actual_boot_disk_size:  "{{ boot_disk_info.size     | disk_size }}"
    desired_boot_disk_size: "{{ instance.boot_disk.size | disk_size }}"

- name: "Resize boot disk and expand root partition"
  shell: >
    qemu-img resize {{ boot_disk }} {{ instance.boot_disk.size }} && \
    virt-resize --expand /dev/sda1 {{ base_path }} {{ boot_disk }}
  when: desired_boot_disk_size | int > actual_boot_disk_size | int

- name: "Generate host prep script"
  template:
      src: "host_prep.sh.j2"
      dest: "{{ host_prep_script }}"
      mode: "0755"

- name: "Prepare '{{ instance.name }}' disk image for install"
  command: |
    virt-sysprep --connect qemu:///system \
      -a {{ boot_disk }} \
      --hostname {{ instance.name }} \
      --root-password password:{{ root_password }} \
      --ssh-inject root:file:{{ ssh_key }} \
      --timezone {{ timezone }} \
      --uninstall cloud-init.x86_64 \
      --firstboot {{ host_prep_script }}

- name: "Creating instance '{{ instance.name }}'"
  command: >
    virt-install --connect qemu:///system \
      --import --name {{ instance.name }} \
      --ram {{ instance.memory }} \
      --vcpus {{ instance.cpus }} \
      --os-variant {{ os_variant }} \
      --disk path={{ boot_disk }} \
      {% if instance.other_disks is defined %}
      {% for d in instance.other_disks %}
      --disk path={{ disk_path }}.disk.{{ loop.index }},format={{ d.format }},size={{ d.size | disk_size }} \
      {% endfor %}
      {% endif %}
      {% for nic in instance.nics %}
      --network network={{ nic.network }},model={{ nic.model }},mac={{ nic.macaddress }} \
      {% endfor %}
      --graphics none

- name: "Assign instance '{{ instance.name }}' static IPs for NICs via MAC address"
  command: >
    virsh net-update {{ nic.network }} \
      add ip-dhcp-host \
      "<host mac='{{ nic.macaddress }}' ip='{{ nic.ipv4 }}'/>" \
      --live --config
  become: yes
  when: nic.ipv4 is defined
  with_items: "{{ instance.nics }}"
  loop_control:
    loop_var: "nic"
