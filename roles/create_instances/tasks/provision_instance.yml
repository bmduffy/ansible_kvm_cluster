---

# Modifying images
# https://docs.openstack.org/image-guide/modify-images.html
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/sect-guest_virtual_machine_disk_access_with_offline_tools-virt_resize_resizing_guest_virtual_machines_offline

- name: "Get boot disk path ..."
  set_fact:
      boot_disk : "{{ instance.disks[0].path }}"

- name: "Get boot disk size ..."
  set_fact:
      desired_boot_disk_size: "{{ instance.disks[0].size }}"

- name: "Copy base image disk for '{{ instance.name }}'"
  command: "cp {{ nodes.base_image }} {{ boot_disk }}"
  args:
      creates: "{{ boot_disk }}"

- name: "Check what the boot disk size is"
  command: "qemu-img info {{ boot_disk }} | grep 'virtual size:' | awk '{print $3}'"
  register: output

- name: "Store and convert boot size to an integer"
  set_fact:
      actual_boot_disk_size: "{{ output.stdout[:-1] | int }}"

- name: "DEBUG ... "
  debug:
      msg: "desired = {{ desired_boot_disk_size }}    actual = {{ actual_boot_disk_size }}"

# - name: "Resize the boot disk if a size is specified"
#   command: "qemu-img resize {{ boot_disk }} {{ instance.disks[0].size }}"
#   when: instance.disks[0].size is defined
#
# - name: "Expand root partition to use the rest of the disk if resized"
#   command: ""
#   become: yes

- name: "Generate host prep script"
  template:
    src: "host_prep.sh.j2"
    dest: "{{ host_prep_script }}"
    mode: "0755"

- name: "Prepare '{{ instance.name }}' disk image for install"
  command: |
    virt-sysprep --connect qemu:///system \
      -a {{ boot_disk }} \
      --hostname {{ instance.name }} \
      --root-password password:{{ nodes.root_password }} \
      --ssh-inject root:file:{{ nodes.ssh_key }} \
      --timezone {{ nodes.timezone }} \
      --uninstall cloud-init.x86_64 \
      --firstboot {{ host_prep_script }}

- name: "Creating instance '{{ instance.name }}'"
  command: |
    virt-install --connect qemu:///system \
      --import --name {{ instance.name }} \
      --ram {{ instance.memory }} \
      --vcpus {{ instance.cpus }} \
      --os-variant {{ nodes.os_variant }} \
      {% for disk in instance.disks %}
      {% if disk.size is not defined %}
      --disk path={{ disk.path }},format={{ disk.format }} \
      {% else %}
      --disk path={{ disk.path }},format={{ disk.format }},size={{ disk.size }}
      {% endif %}
      {% endfor %}
      {% for nic in instance.nics %}
      --network network={{ nic.network }},model={{ nic.model }},mac={{ nic.mac }} \
      {% endfor %}
      --graphics none

- name: "Wait for '{{ instance.name }}' to become available"
  wait_for:
    port: 22
    timeout: 300

- name: "Assign instance '{{ instance.name }}' static IPs for NICs via MAC address"
  command: |
    {% for nic in instance.nics %}
    {% if nic.ipv4 is defined %}
    virsh net-update {{ nic.network }} \
      add ip-dhcp-host '<host mac="{{ nic.mac }}" ip="{{ nic.ipv4 }}"/>' \
      --live --config
    {% endif %}
    {% endfor %}
  become: yes
